// Generated by CoffeeScript 1.6.3
(function() {
  var TL, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  TL = {};

  TL.Resource = (function() {
    function Resource() {}

    Resource.prototype.construct = function(destroy) {
      this.destroy = destroy;
      return this.holdLevel = 0;
    };

    Resource.prototype.hold = function() {
      return this.holdLevel++;
    };

    Resource.prototype.release = function() {
      if (--this.holdLevel === 0) {
        this.destroy();
      }
      return this.destroy = void 0;
    };

    return Resource;

  })();

  TL.Evented = (function() {
    function Evented() {}

    Evented.prototype.listenEvent = function(name, fn) {
      var index, _base,
        _this = this;
      if (this.eventListeners == null) {
        this.eventListeners = {};
      }
      if ((_base = this.eventListeners)[name] == null) {
        _base[name] = {
          lastId: 0,
          funcs: []
        };
      }
      index = this.eventListeners[name].lastId++;
      this.eventListeners[name].funcs[index] = fn;
      return new TL.Resource(function() {
        return _this.unlisten(name, index);
      });
    };

    Evented.prototype.unlistenEvent = function(name, fnOrIndex) {
      var fn, index, listeners, _ref, _results;
      if (this.eventListeners == null) {
        this.eventListeners = {};
      }
      listeners = this.eventListeners[name];
      if (listeners != null) {
        if (typeof fnOrIndex === 'number') {
          return delete listeners.funcs[fnOrIndex];
        } else {
          _ref = listeners.funcs;
          _results = [];
          for (index in _ref) {
            fn = _ref[index];
            if (!(fn === fnOrIndex)) {
              continue;
            }
            delete listeners.funcs[i];
            break;
          }
          return _results;
        }
      }
    };

    Evented.prototype.fireEvent = function(name, event, returnEvent) {
      var fn, index, isOk, result, _ref, _ref1;
      if (event == null) {
        event = {};
      }
      if (returnEvent == null) {
        returnEvent = false;
      }
      $.extend(event, {
        name: name,
        _isPropagationPrevented: false,
        _isCanceled: false,
        cancel: function() {
          return this._isCanceled = true;
        },
        preventPropagation: function() {
          return this._isPropagationPrevented = true;
        }
      });
      isOk = true;
      if (((_ref = this.eventListeners) != null ? _ref[name] : void 0) != null) {
        _ref1 = this.eventListeners[name].funcs;
        for (index in _ref1) {
          fn = _ref1[index];
          if (!(fn != null)) {
            continue;
          }
          if (event._isPropagationPrevented) {
            break;
          }
          result = fn.call(this, event);
          if (result === false || event._isCanceled) {
            isOk = false;
          }
        }
      }
      if (returnEvent) {
        return event;
      } else {
        return isOk;
      }
    };

    return Evented;

  })();

  TL.Sized = (function() {
    function Sized() {}

    Sized.prototype.getSize = function(type, axis) {
      return this['get' + type + axis]();
    };

    Sized.prototype.calcSize = function(axis) {
      var child, innerSpace, isString, parent, parts, percents, remainingSpace, sibling, siblingVerb, siblings, totalParts, verb, _i, _len;
      verb = this['getRaw' + axis]();
      isString = $.type(verb) === 'string';
      if (verb === 'auto') {
        return TL.Misc.sum((function() {
          var _i, _len, _ref, _results;
          _ref = this.getChildrenElements();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(child.getSize('Outer', axis));
          }
          return _results;
        }).call(this));
      } else if ($.type(verb) === 'number') {
        return verb;
      } else if (isString && verb.indexOf('px') > -1) {
        return parseInt(verb);
      } else if (isString && verb.indexOf('%') > -1) {
        percents = parseInt(verb);
        parent = this.getParentElement();
        innerSpace = parent != null ? parent.getSize('Inner', axis) : 0;
        return Math.round(innerSpace * percents / 100) - this.getExtraOffsetBefore() - this.getExtraOffsetAfter();
      } else if (isString && verb.indexOf('part') > -1) {
        parts = parseInt(verb);
        totalParts = 0;
        parent = this.getParentElement();
        remainingSpace = parent != null ? parent.getSize('Inner', axis) : 0;
        if (parent != null) {
          siblings = parent.getChildrenElements();
          for (_i = 0, _len = siblings.length; _i < _len; _i++) {
            sibling = siblings[_i];
            siblingVerb = sibling.getSize('Raw', axis);
            if ($.type(siblingVerb) === 'string' && siblingVerb.indexOf('part') > -1) {
              totalParts += parseInt(siblingVerb);
            } else {
              remainingSpace -= sibling.getSize('Outer', axis);
            }
          }
        }
        return Math.round(remainingSpace * parts / totalParts) - this.getExtraOffsetBefore() - this.getExtraOffsetAfter();
      }
    };

    Sized.prototype.getParentElement = function() {};

    Sized.prototype.getChildrenElements = function() {
      return [];
    };

    Sized.prototype.getRawHeight = function() {
      return 'auto';
    };

    Sized.prototype.getInnerHeight = function() {
      return this.calcSize('Height');
    };

    Sized.prototype.getOuterHeight = function() {
      return this.getInnerHeight() + this.getExtraOffsetBefore() + this.getExtraOffsetAfter();
    };

    Sized.prototype.getExtraOffsetBefore = function() {
      return 0;
    };

    Sized.prototype.getExtraOffsetAfter = function() {
      return 0;
    };

    Sized.prototype.doesSizeDependOnParent = function() {
      var verb;
      verb = this.getRawHeight();
      return $.type(verb) === 'string' && (verb.indexOf('part') > -1 || verb.indexOf('%') > -1);
    };

    return Sized;

  })();

  TL.Timeline = (function(_super) {
    __extends(Timeline, _super);

    function Timeline(container, config, items) {
      var group, line, range, rawItem, rule, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3;
      if (config == null) {
        config = {};
      }
      if (items == null) {
        items = [];
      }
      this.container = new TL.Element.Container($(container), this);
      this.config = $.extend(true, this.getDefaultConfig(), config);
      this.root = this.createElement('Root');
      this.sidebar = this.createElement('Sidebar');
      this.ruler = this.createElement('Ruler');
      this.corner = this.createElement('Corner');
      this.field = this.createElement('Field');
      this.ranges = [];
      _ref = this.config.ranges;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        range = _ref[_i];
        this.rawAddRange(range);
      }
      this.sortRanges();
      this.groups = [];
      _ref1 = this.config.groups;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        group = _ref1[_j];
        this.rawAddGroup(group);
      }
      this.sortGroups();
      this.lines = [];
      _ref2 = this.config.lines;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        line = _ref2[_k];
        this.rawAddLine(line);
      }
      this.sortLines();
      this.dashRules = [];
      _ref3 = this.config.dashRules;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        rule = _ref3[_l];
        this.rawAddDashRule(rule);
      }
      this.sortDashRules();
      this.items = [];
      for (_m = 0, _len4 = items.length; _m < _len4; _m++) {
        rawItem = items[_m];
        this.rawAddItem(this.createItem(rawItem));
      }
      this.checkVerticalFitting();
      this.root.build();
      this.icm = new TL.InteractiveCreationMode(this);
    }

    Timeline.prototype.createElement = function(type, data) {
      var _ref;
      if (data == null) {
        data = {};
      }
      return ((_ref = this.config.renderAtSidebar) != null ? _ref : this.constructor.createElement).call(this, type, data);
    };

    Timeline.createElement = function(type, data) {
      if (data == null) {
        data = {};
      }
      return new TL.Element[type](this, data);
    };

    Timeline.prototype.rawAddRange = function(range) {
      var elseRange, _i, _len, _ref;
      _ref = this.ranges;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elseRange = _ref[_i];
        if (range.from < elseRange.raw.to && range.to > elseRange.raw.from) {
          throw 'Can\'t add range overlapping existing one';
        }
      }
      return this.ranges.push(this.createElement('Range', range));
    };

    Timeline.prototype.sortRanges = function() {
      return this.ranges = this.ranges.sort(function(a, b) {
        return a.raw.from - b.raw.from;
      });
    };

    Timeline.prototype.rawAddGroup = function(group) {
      var elseGroup, _i, _len, _ref;
      _ref = this.groups;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elseGroup = _ref[_i];
        if (elseGroup.raw.id === group.id) {
          throw 'Can\'t add group with same id as existing one has';
        }
      }
      return this.groups.push(this.createElement('Group', group));
    };

    Timeline.prototype.sortGroups = function() {
      return this.groups = this.groups.sort(function(a, b) {
        var _ref, _ref1;
        return ((_ref = a.raw.order) != null ? _ref : 0) - ((_ref1 = b.raw.order) != null ? _ref1 : 0);
      });
    };

    Timeline.prototype.rawAddLine = function(line) {
      var elseLine, _i, _len, _ref;
      _ref = this.lines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elseLine = _ref[_i];
        if (elseLine.raw.id === line.id) {
          throw 'Can\'t add line with same id as existing one has';
        }
      }
      return this.lines.push(this.createElement('Line', line));
    };

    Timeline.prototype.sortLines = function() {
      return this.lines = this.lines.sort(function(a, b) {
        var _ref, _ref1;
        return ((_ref = a.raw.order) != null ? _ref : 0) - ((_ref1 = b.raw.order) != null ? _ref1 : 0);
      });
    };

    Timeline.prototype.rawAddDashRule = function(rule) {
      var elseRule, _i, _len, _ref;
      _ref = this.dashRules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elseRule = _ref[_i];
        if (elseRule.id === rule.id) {
          throw 'Can\'t add dash rule with same id as existing one has';
        }
      }
      return this.dashRules.push(rule);
    };

    Timeline.prototype.sortDashRules = function() {
      return this.dashRules = this.dashRules.sort(function(a, b) {
        var _ref, _ref1;
        return ((_ref = a.order) != null ? _ref : 0) - ((_ref1 = b.order) != null ? _ref1 : 0);
      });
    };

    Timeline.prototype.createItem = function(raw) {
      var item;
      return item = this.createElement('Item', raw);
    };

    Timeline.prototype.rawAddItem = function(item) {
      if (!item.isValid()) {
        throw 'Can\'t add item due to its invalidity';
      }
      return this.items.push(item);
    };

    Timeline.prototype.addItem = function(item) {
      this.rawAddItem(item);
      return item.build();
    };

    Timeline.prototype.getDefaultConfig = function() {
      return {
        field: {
          render: null,
          place: null
        },
        corner: {
          render: null,
          place: null
        },
        ruler: {
          isVisible: true,
          position: 'top',
          height: 50,
          render: null,
          place: null
        },
        sidebar: {
          isVisible: true,
          position: 'left',
          width: 100,
          render: null,
          place: null
        },
        range: {
          extraOffset: {
            before: 0,
            after: 0
          },
          render: null,
          place: null,
          renderAtRuler: null,
          placeAtRuler: null
        },
        group: {
          height: 'auto',
          extraOffset: {
            before: 0,
            after: 0
          },
          render: null,
          place: null
        },
        line: {
          height: 50,
          extraOffset: {
            before: 0,
            after: 0
          },
          render: null,
          place: null,
          renderAtSidebar: null,
          placeAtSidebar: null
        },
        item: {
          isDraggable: true,
          canCrossRanges: true,
          render: null,
          place: null,
          isValid: null
        },
        dash: {
          render: null,
          place: null
        },
        scale: 1,
        timezone: 'UTC',
        snapResolution: 1,
        height: '100%',
        createElement: null,
        dashRules: [],
        ranges: [],
        groups: [],
        lines: []
      };
    };

    Timeline.prototype.calcDashes = function() {
      var dash, dashRule, dashes, map, offset, range, step, time, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3;
      dashes = [];
      _ref = this.dashRules;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dashRule = _ref[_i];
        step = (_ref1 = dashRule.step) != null ? _ref1 : Infinity;
        offset = (_ref2 = dashRule.offset) != null ? _ref2 : 0;
        _ref3 = this.ranges;
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          range = _ref3[_j];
          if (step === Infinity) {
            time = offset;
          } else {
            time = Math.floor(range.raw.from / step) * step + offset;
          }
          while (time < range.raw.to) {
            if (time >= range.raw.from) {
              dashes.push({
                time: time,
                rule: dashRule
              });
            }
            time += step;
          }
        }
      }
      map = {};
      for (_k = 0, _len2 = dashes.length; _k < _len2; _k++) {
        dash = dashes[_k];
        if (map[dash.time] == null) {
          map[dash.time] = dash;
        }
      }
      dashes = [];
      for (time in map) {
        dash = map[time];
        dashes.push(this.createElement('Dash', dash));
      }
      return dashes;
    };

    Timeline.prototype.getGroupById = function(groupId) {
      var group, _i, _len, _ref;
      if (groupId != null) {
        _ref = this.groups;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          group = _ref[_i];
          if (group.raw.id === groupId) {
            return group;
          }
        }
      }
    };

    Timeline.prototype.getRangeByTime = function(time) {
      var range, _i, _len, _ref;
      _ref = this.ranges;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        range = _ref[_i];
        if ((range.raw.from <= time && time < range.raw.to)) {
          return range;
        }
      }
    };

    Timeline.prototype.getRangeByOffset = function(offset) {
      var range, rangeEnd, rangeStart, _i, _len, _ref;
      _ref = this.ranges;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        range = _ref[_i];
        rangeStart = range.getOffset() + range.getInternalOffset(range.raw.from);
        rangeEnd = rangeStart + range.getInnerWidth();
        if ((rangeStart <= offset && offset < rangeEnd)) {
          return range;
        }
      }
    };

    Timeline.prototype.getLineById = function(lineId) {
      var line, _i, _len, _ref;
      _ref = this.lines;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        if (line.raw.id === lineId) {
          return line;
        }
      }
    };

    Timeline.prototype.getLineByVerticalOffset = function(group, verticalOffset) {
      var line, lineEnd, lineStart, _i, _len, _ref;
      _ref = group.getLines();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        lineStart = line.getVerticalOffset() + line.getInternalVerticalOffset();
        lineEnd = lineStart + line.getInnerHeight();
        if ((lineStart <= verticalOffset && verticalOffset < lineEnd)) {
          return line;
        }
      }
    };

    Timeline.prototype.getTime = function(offset) {
      var range;
      range = this.getRangeByOffset(offset);
      if (range != null) {
        return range.getTimeByOffset(offset);
      }
    };

    Timeline.prototype.getOffset = function(time) {
      var range;
      if (time != null) {
        range = this.getRangeByTime(time);
        if (range != null) {
          return range.getOffset() + range.getInternalOffset(time);
        }
      }
    };

    Timeline.prototype.approxTime = function(time, allowPostRange) {
      var approxed, resolution;
      if (allowPostRange == null) {
        allowPostRange = false;
      }
      if (time != null) {
        resolution = this.config.snapResolution;
        approxed = Math.round(time / resolution) * resolution;
        if ((allowPostRange && this.getRangeByTime(approxed - 1)) || this.getRangeByTime(approxed)) {
          return approxed;
        } else {
          approxed = Math.ceil(time / resolution) * resolution;
          if (this.getRangeByTime(approxed)) {
            return approxed;
          } else {
            approxed = Math.floor(time / resolution) * resolution;
            if (this.getRangeByTime(approxed)) {
              return approxed;
            }
          }
        }
      }
    };

    Timeline.prototype.checkVerticalFitting = function() {
      var group, _i, _len, _ref, _results;
      if (this.root.getRawHeight() === 'auto') {
        if (this.ruler.doesSizeDependOnParent()) {
          throw 'In timeline auto-height mode the ruler size must not be specified in parts of remaining space';
        }
        _ref = this.groups;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          group = _ref[_i];
          if (group.doesSizeDependOnParent()) {
            throw 'In timeline auto-height mode there must not be groups with size specified in parts of remaining space';
          }
        }
        return _results;
      }
    };

    return Timeline;

  })(TL.Evented);

  TL.InteractiveCreationMode = (function() {
    function InteractiveCreationMode(timeline) {
      this.timeline = timeline;
      this.isActive = false;
      this.build();
    }

    InteractiveCreationMode.prototype.build = function() {
      var $dash, $helper, group, _i, _len, _ref;
      this.$helpers = [];
      this.$dashes = [];
      _ref = this.timeline.groups;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        group = _ref[_i];
        $dash = TL.Misc.addDom('icm-dash', group.$dom);
        this.$dashes.push($dash);
        $helper = TL.Misc.addDom('icm-helper', group.$dom);
        this.$helpers.push($helper);
      }
      this.$hint = TL.Misc.addDom('icm-hint');
      this.placeDashes();
      return this.placeHelpers();
    };

    InteractiveCreationMode.prototype.activate = function(itemTemplate, groupId) {
      this.itemTemplate = itemTemplate != null ? itemTemplate : {};
      this.isActive = true;
      this.group = this.timeline.getGroupById(groupId);
      return this.activateState('SetBeginning');
    };

    InteractiveCreationMode.prototype.deactivate = function() {
      this.isActive = false;
      this.itemTemplate = null;
      this.from = null;
      this.to = null;
      this.line = null;
      this.group = null;
      return this.deactivateState(this.stateName);
    };

    InteractiveCreationMode.prototype.activateState = function(stateName) {
      this.deactivateState(this.stateName);
      this.stateName = stateName;
      return this['activateState' + this.stateName]();
    };

    InteractiveCreationMode.prototype.deactivateState = function(stateName) {
      if (stateName != null) {
        this['deactivateState' + stateName]();
      }
      return this.stateName = null;
    };

    InteractiveCreationMode.prototype.activateStateSetBeginning = function() {
      var fieldOffset,
        _this = this;
      fieldOffset = TL.Misc.getScrollContainer(this.timeline.field.$dom).offset();
      this.moveHandler = function(e) {
        var group, groupOffset, mouseInfo;
        group = $(e.target).parents('.tl-group').data('timeline-host-object');
        mouseInfo = {
          event: e
        };
        if (group != null) {
          groupOffset = TL.Misc.getScrollContainer(group.$dom).offset();
          mouseInfo.group = group;
          mouseInfo.parentOffset = groupOffset;
          _this.line = _this.timeline.getLineByVerticalOffset(group, e.pageY - groupOffset.top);
          _this.from = _this.timeline.approxTime(_this.timeline.getTime(e.pageX - groupOffset.left));
        } else {
          _this.from = null;
        }
        _this.placeDashes();
        _this.placeHelpers();
        _this.placeHint(mouseInfo);
        return _this.renderHint(mouseInfo);
      };
      this.timeline.field.$dom.on('mousemove', this.moveHandler);
      this.leaveHandler = function(e) {
        _this.from = null;
        _this.placeDashes();
        _this.placeHelpers();
        _this.placeHint({});
        return _this.renderHint({});
      };
      this.timeline.field.$dom.on('mouseleave', this.leaveHandler);
      this.clickHandler = function(e) {
        if (_this.from != null) {
          return _this.activateState('SetEnding');
        }
      };
      return this.timeline.field.$dom.on('click', this.clickHandler);
    };

    InteractiveCreationMode.prototype.deactivateStateSetBeginning = function() {
      this.placeDashes();
      this.placeHelpers();
      this.placeHint({});
      this.renderHint({});
      this.timeline.field.$dom.off('mousemove', this.moveHandler);
      this.moveHandler = null;
      this.timeline.field.$dom.off('mouseleave', this.leaveHandler);
      this.leaveHandler = null;
      this.timeline.field.$dom.off('click', this.clickHandler);
      return this.clickHandler = null;
    };

    InteractiveCreationMode.prototype.activateStateSetEnding = function() {
      var fieldOffset,
        _this = this;
      fieldOffset = TL.Misc.getScrollContainer(this.timeline.field.$dom).offset();
      this.moveHandler = function(e) {
        var group, groupOffset, mouseInfo, mouseTime;
        group = $(e.target).parents('.tl-group').data('timeline-host-object');
        mouseInfo = {
          event: e
        };
        if (group != null) {
          groupOffset = TL.Misc.getScrollContainer(group.$dom).offset();
          mouseInfo.group = group;
          mouseInfo.parentOffset = groupOffset;
          mouseTime = _this.timeline.getTime(e.pageX - groupOffset.left);
          _this.to = _this.timeline.approxTime(mouseTime, true);
        } else {
          _this.to = null;
        }
        _this.placeDashes();
        _this.placeHelpers();
        _this.placeHint(mouseInfo);
        return _this.renderHint(mouseInfo);
      };
      this.timeline.field.$dom.on('mousemove', this.moveHandler);
      this.leaveHandler = function(e) {
        _this.to = null;
        _this.placeDashes();
        _this.placeHelpers();
        _this.placeHint({});
        return _this.renderHint({});
      };
      this.timeline.field.$dom.on('mouseleave', this.leaveHandler);
      this.clickHandler = function(e) {
        var item;
        if (_this.to != null) {
          item = _this.timeline.createItem($.extend({}, _this.itemTemplate, {
            from: _this.from,
            to: _this.to,
            lineId: _this.line.raw.id
          }));
          if (item.isValid()) {
            if (_this.timeline.fireEvent('item:create', {
              item: item
            })) {
              _this.timeline.addItem(item);
              return _this.deactivate();
            }
          }
        }
      };
      return this.timeline.field.$dom.on('click', this.clickHandler);
    };

    InteractiveCreationMode.prototype.deactivateStateSetEnding = function() {
      this.placeDashes();
      this.placeHelpers();
      this.placeHint({});
      this.renderHint({});
      this.timeline.field.$dom.off('mousemove', this.moveHandler);
      this.moveHandler = null;
      this.timeline.field.$dom.off('mouseleave', this.leaveHandler);
      this.leaveHandler = null;
      this.timeline.field.$dom.off('click', this.clickHandler);
      return this.clickHandler = null;
    };

    InteractiveCreationMode.prototype.placeDashes = function() {
      var $dash, _i, _len, _ref, _results;
      _ref = this.$dashes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $dash = _ref[_i];
        _results.push(this.placeDash($dash));
      }
      return _results;
    };

    InteractiveCreationMode.prototype.placeDash = function($dash) {
      var offset;
      offset = this.timeline.getOffset((function() {
        switch (this.stateName) {
          case 'SetBeginning':
            return this.from;
          case 'SetEnding':
            return this.to - 1;
        }
      }).call(this));
      if (this.isActive && (offset != null)) {
        return $dash.css({
          display: 'block',
          left: offset
        });
      } else {
        return $dash.css({
          display: 'none'
        });
      }
    };

    InteractiveCreationMode.prototype.placeHelpers = function() {
      var $helper, _i, _len, _ref, _results;
      _ref = this.$helpers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        $helper = _ref[_i];
        _results.push(this.placeHelper($helper));
      }
      return _results;
    };

    InteractiveCreationMode.prototype.placeHelper = function($helper) {
      var group, offset, width, _ref;
      group = $helper.parents('.tl-group').data('timeline-host-object');
      if (group === ((_ref = this.line) != null ? _ref.getGroup() : void 0)) {
        switch (this.stateName) {
          case 'SetBeginning':
            offset = this.timeline.getOffset(this.from);
            width = '';
            break;
          case 'SetEnding':
            offset = this.timeline.getOffset(this.from);
            width = this.to != null ? this.timeline.getOffset(this.to - 1) - offset : null;
        }
      }
      if (this.isActive && (this.line != null) && (offset != null) && (width != null)) {
        return $helper.css({
          display: 'block',
          left: offset,
          width: width,
          top: this.line.getVerticalOffset() + this.line.getInternalVerticalOffset(),
          height: this.line.getInnerHeight()
        });
      } else {
        return $helper.css({
          display: 'none'
        });
      }
    };

    InteractiveCreationMode.prototype.renderHint = function(mouseInfo) {
      var _ref, _ref1;
      return ((_ref = (_ref1 = this.timeline.config.icm) != null ? _ref1.renderHint : void 0) != null ? _ref : this.constructor.renderHint).call(this, mouseInfo);
    };

    InteractiveCreationMode.renderHint = function(mouseInfo) {
      var offset, time;
      if (this.isActive && (mouseInfo.group != null)) {
        offset = mouseInfo.event.pageX - mouseInfo.parentOffset.left;
        time = this.timeline.approxTime(this.timeline.getTime(offset), this.stateName === 'SetEnding');
        if (time != null) {
          return this.$hint.text(moment.unix(time).tz(this.timeline.config.timezone).tz(this.timeline.config.timezone).format('DD.MM.YYYY HH:mm:ss'));
        }
      } else {
        return this.$hint.empty();
      }
    };

    InteractiveCreationMode.prototype.placeHint = function(mouseInfo) {
      var _ref, _ref1;
      return ((_ref = (_ref1 = this.timeline.config.icm) != null ? _ref1.placeHint : void 0) != null ? _ref : this.constructor.placeHint).call(this, mouseInfo);
    };

    InteractiveCreationMode.placeHint = function(mouseInfo) {
      if (this.isActive && (mouseInfo.group != null)) {
        this.$hint.appendTo(TL.Misc.getScrollContainer(mouseInfo.group.$dom));
        return this.$hint.css({
          left: mouseInfo.event.pageX - mouseInfo.parentOffset.left,
          top: mouseInfo.event.pageY - mouseInfo.parentOffset.top
        });
      } else {
        return this.$hint.detach();
      }
    };

    return InteractiveCreationMode;

  })();

  TL.Misc = (function() {
    function Misc() {}

    Misc.addDom = function(name, $container) {
      var $element;
      $element = $('<div />').addClass("tl-" + name);
      if ($container) {
        $element.appendTo(this.getScrollContainer($container));
      }
      return $element;
    };

    Misc.scrollize = function($element, axis, pairs) {
      var $inner, config;
      if (pairs == null) {
        pairs = [];
      }
      $inner = this.addDom('scroll-inner', $element);
      $element.data('scroll-inner', $inner);
      config = {
        theme: 'dark-2',
        autoHideScrollbar: true,
        axis: axis,
        scrollInertia: 0,
        mouseWheel: {
          scrollAmount: 30
        },
        callbacks: {}
      };
      if (axis === 'xy') {
        config.mouseWheel.axis = 'x';
      }
      if (pairs.length) {
        config.callbacks.whileScrolling = function() {
          var $targets, pair, position, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = pairs.length; _i < _len; _i++) {
            pair = pairs[_i];
            $targets = pair.getTarget();
            if ($targets != null ? $targets.length : void 0) {
              position = {};
              if (pair.axis.indexOf('x') > -1) {
                position.x = this.mcs.left + 'px';
              }
              if (pair.axis.indexOf('y') > -1) {
                position.y = this.mcs.top + 'px';
              }
              _results.push($.each($targets, function() {
                return $(this).mCustomScrollbar('scrollTo', position, {
                  scrollInertia: 0,
                  timeout: 0,
                  callbacks: false
                });
              }));
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        };
      }
      return $element.mCustomScrollbar(config);
    };

    Misc.getScrollContainer = function($element) {
      var $inner;
      $inner = $element.data('scroll-inner');
      if ($inner != null ? $inner.length : void 0) {
        return $inner;
      } else {
        return $element;
      }
    };

    Misc.setInnerSize = function($element, size) {
      var css;
      css = {};
      if (size.x) {
        css.width = size.x;
      }
      if (size.y) {
        css.height = size.y;
      }
      this.getScrollContainer($element).css(css);
      return $element.mCustomScrollbar('update');
    };

    Misc.sum = function(array) {
      var sum, value, _i, _len;
      sum = 0;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        value = array[_i];
        sum += value;
      }
      return sum;
    };

    return Misc;

  })();

  TL.Element = (function(_super) {
    __extends(Element, _super);

    function Element(timeline, raw) {
      this.timeline = timeline;
      this.raw = raw != null ? raw : {};
      this.className = this.getClassName();
      this.init();
    }

    Element.prototype.getClassName = function() {
      return '';
    };

    Element.prototype.init = function() {};

    Element.prototype.cfg = function() {
      var _ref;
      return (_ref = this.timeline.config[this.className]) != null ? _ref : {};
    };

    Element.prototype.getRawHeight = function() {
      var _ref, _ref1;
      return (_ref = (_ref1 = this.raw.height) != null ? _ref1 : this.cfg().height) != null ? _ref : 'auto';
    };

    Element.prototype.getExtraOffsetBefore = function() {
      var _ref, _ref1, _ref2;
      return (_ref = (_ref1 = this.raw.extraOffsetBefore) != null ? _ref1 : (_ref2 = this.cfg().extraOffset) != null ? _ref2.before : void 0) != null ? _ref : 0;
    };

    Element.prototype.getExtraOffsetAfter = function() {
      var _ref, _ref1, _ref2;
      return (_ref = (_ref1 = this.raw.extraOffsetAfter) != null ? _ref1 : (_ref2 = this.cfg().extraOffset) != null ? _ref2.after : void 0) != null ? _ref : 0;
    };

    return Element;

  })(TL.Sized);

  TL.Element.Container = (function(_super) {
    __extends(Container, _super);

    function Container($dom, timeline) {
      this.$dom = $dom;
      this.timeline = timeline;
    }

    Container.prototype.getRawHeight = function() {
      return 0;
    };

    Container.prototype.getInnerHeight = function() {
      return this.$dom.innerHeight();
    };

    Container.prototype.getChildrenElements = function() {
      return [this.timeline];
    };

    return Container;

  })(TL.Sized);

  TL.Element.Root = (function(_super) {
    __extends(Root, _super);

    function Root() {
      _ref = Root.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Root.prototype.getClassName = function() {
      return 'root';
    };

    Root.prototype.build = function() {
      this.$dom = TL.Misc.addDom('root', this.timeline.container.$dom);
      this.render();
      this.place();
      this.timeline.sidebar.build();
      this.timeline.ruler.build();
      this.timeline.corner.build();
      return this.timeline.field.build();
    };

    Root.prototype.render = function() {};

    Root.prototype.place = function() {
      return this.$dom.css({
        height: this.getInnerHeight()
      });
    };

    Root.prototype.getParentElement = function() {
      return this.timeline.container;
    };

    Root.prototype.getChildrenElements = function() {
      return this.timeline.groups.concat([this.timeline.ruler]);
    };

    Root.prototype.getRawHeight = function() {
      var _ref1;
      return (_ref1 = this.timeline.config.height) != null ? _ref1 : 'auto';
    };

    return Root;

  })(TL.Element);

  TL.Element.Sidebar = (function(_super) {
    __extends(Sidebar, _super);

    function Sidebar() {
      _ref1 = Sidebar.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Sidebar.prototype.getClassName = function() {
      return 'sidebar';
    };

    Sidebar.prototype.isVisible = function() {
      var _ref2, _ref3;
      return (_ref2 = (_ref3 = this.raw.isVisible) != null ? _ref3 : this.cfg().isVisible) != null ? _ref2 : true;
    };

    Sidebar.prototype.getOuterWidth = function() {
      if (this.isVisible()) {
        return this.getInnerWidth();
      } else {
        return 0;
      }
    };

    Sidebar.prototype.getInnerWidth = function() {
      var _ref2, _ref3;
      if (this.isVisible()) {
        return (_ref2 = (_ref3 = this.raw.width) != null ? _ref3 : this.cfg().width) != null ? _ref2 : 100;
      } else {
        return 0;
      }
    };

    Sidebar.prototype.build = function() {
      this.$dom = TL.Misc.addDom('sidebar', this.timeline.root.$dom);
      this.render();
      this.place();
      return this.buildGroups();
    };

    Sidebar.prototype.render = function() {
      var _ref2, _ref3;
      return ((_ref2 = (_ref3 = this.raw.render) != null ? _ref3 : this.cfg().render) != null ? _ref2 : this.constructor.render).call(this);
    };

    Sidebar.render = function() {};

    Sidebar.prototype.place = function() {
      var _ref2, _ref3;
      return ((_ref2 = (_ref3 = this.raw.place) != null ? _ref3 : this.cfg().place) != null ? _ref2 : this.constructor.place).call(this);
    };

    Sidebar.place = function() {
      this.$dom.css(this.timeline.config.ruler.position === 'top' ? {
        top: this.timeline.ruler.getOuterHeight(),
        bottom: 0
      } : {
        top: 0,
        bottom: this.timeline.ruler.getOuterHeight()
      });
      this.$dom.css(this.cfg().position === 'left' ? {
        left: 0,
        right: 'auto'
      } : {
        left: 'auto',
        right: 0
      });
      return this.$dom.css({
        width: this.getInnerWidth()
      });
    };

    Sidebar.prototype.buildGroups = function() {
      var group, _i, _len, _ref2, _results;
      _ref2 = this.timeline.groups;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        group = _ref2[_i];
        _results.push(group.buildAtSidebar());
      }
      return _results;
    };

    return Sidebar;

  })(TL.Element);

  TL.Element.Ruler = (function(_super) {
    __extends(Ruler, _super);

    function Ruler() {
      _ref2 = Ruler.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Ruler.prototype.getClassName = function() {
      return 'ruler';
    };

    Ruler.prototype.isVisible = function() {
      var _ref3, _ref4;
      return (_ref3 = (_ref4 = this.raw.isVisible) != null ? _ref4 : this.cfg().isVisible) != null ? _ref3 : true;
    };

    Ruler.prototype.getRawHeight = function() {
      if (this.isVisible()) {
        return Ruler.__super__.getRawHeight.call(this);
      } else {
        return 0;
      }
    };

    Ruler.prototype.getExtraOffsetBefore = function() {
      if (this.isVisible()) {
        return Ruler.__super__.getExtraOffsetBefore.call(this);
      } else {
        return 0;
      }
    };

    Ruler.prototype.getExtraOffsetAfter = function() {
      if (this.isVisible()) {
        return Ruler.__super__.getExtraOffsetAfter.call(this);
      } else {
        return 0;
      }
    };

    Ruler.prototype.getParentElement = function() {
      return this.timeline.root;
    };

    Ruler.prototype.build = function() {
      var _this = this;
      this.$dom = TL.Misc.addDom('ruler', this.timeline.root.$dom);
      TL.Misc.scrollize(this.$dom, 'x', [
        {
          axis: 'x',
          getTarget: function() {
            var group, _i, _len, _ref3, _results;
            _ref3 = _this.timeline.groups;
            _results = [];
            for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
              group = _ref3[_i];
              _results.push(group.$dom);
            }
            return _results;
          }
        }
      ]);
      this.render();
      this.place();
      this.buildRanges();
      return this.buildDashes();
    };

    Ruler.prototype.render = function() {
      var _ref3, _ref4;
      return ((_ref3 = (_ref4 = this.raw.render) != null ? _ref4 : this.cfg().render) != null ? _ref3 : this.constructor.render).call(this);
    };

    Ruler.render = function() {};

    Ruler.prototype.place = function() {
      var _ref3, _ref4;
      return ((_ref3 = (_ref4 = this.raw.place) != null ? _ref4 : this.cfg().place) != null ? _ref3 : this.constructor.place).call(this);
    };

    Ruler.place = function() {
      var range;
      this.$dom.css(this.timeline.config.sidebar.position === 'left' ? {
        left: this.timeline.sidebar.getOuterWidth(),
        right: 0
      } : {
        left: 0,
        right: this.timeline.sidebar.getOuterWidth()
      });
      this.$dom.css(this.cfg().position === 'top' ? {
        top: 0,
        bottom: 'auto'
      } : {
        top: 'auto',
        bottom: 0
      });
      this.$dom.css({
        height: this.timeline.ruler.getInnerHeight()
      });
      return TL.Misc.setInnerSize(this.$dom, {
        x: TL.Misc.sum((function() {
          var _i, _len, _ref3, _results;
          _ref3 = this.timeline.ranges;
          _results = [];
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            range = _ref3[_i];
            _results.push(range.getOuterWidth());
          }
          return _results;
        }).call(this)),
        y: this.timeline.ruler.getInnerHeight()
      });
    };

    Ruler.prototype.buildRanges = function() {
      var range, _i, _len, _ref3, _results;
      _ref3 = this.timeline.ranges;
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        range = _ref3[_i];
        _results.push(range.buildAtRuler());
      }
      return _results;
    };

    Ruler.prototype.buildDashes = function() {
      var dash, _i, _len, _ref3, _results;
      _ref3 = this.timeline.calcDashes();
      _results = [];
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        dash = _ref3[_i];
        _results.push(dash.buildAtRuler());
      }
      return _results;
    };

    return Ruler;

  })(TL.Element);

  TL.Element.Corner = (function(_super) {
    __extends(Corner, _super);

    function Corner() {
      _ref3 = Corner.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Corner.prototype.getClassName = function() {
      return 'corner';
    };

    Corner.prototype.build = function() {
      this.$dom = TL.Misc.addDom('corner', this.timeline.root.$dom);
      this.render();
      return this.place();
    };

    Corner.prototype.render = function() {
      var _ref4, _ref5;
      return ((_ref4 = (_ref5 = this.raw.render) != null ? _ref5 : this.cfg().render) != null ? _ref4 : this.constructor.render).call(this);
    };

    Corner.render = function() {};

    Corner.prototype.place = function() {
      var _ref4, _ref5;
      return ((_ref4 = (_ref5 = this.raw.place) != null ? _ref5 : this.cfg().place) != null ? _ref4 : this.constructor.place).call(this);
    };

    Corner.place = function() {
      this.$dom.css(this.timeline.config.ruler.position === 'top' ? {
        top: 0,
        bottom: ''
      } : {
        top: '',
        bottom: 0
      });
      this.$dom.css(this.timeline.config.sidebar.position === 'left' ? {
        left: 0,
        right: ''
      } : {
        left: '',
        right: 0
      });
      return this.$dom.css({
        width: this.timeline.sidebar.getOuterWidth(),
        height: this.timeline.ruler.getOuterHeight()
      });
    };

    return Corner;

  })(TL.Element);

  TL.Element.Field = (function(_super) {
    __extends(Field, _super);

    function Field() {
      _ref4 = Field.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Field.prototype.getClassName = function() {
      return 'field';
    };

    Field.prototype.build = function() {
      this.$dom = TL.Misc.addDom('field', this.timeline.root.$dom);
      this.render();
      this.place();
      return this.buildGroups();
    };

    Field.prototype.render = function() {
      var _ref5, _ref6;
      return ((_ref5 = (_ref6 = this.raw.render) != null ? _ref6 : this.cfg().render) != null ? _ref5 : this.constructor.render).call(this);
    };

    Field.render = function() {};

    Field.prototype.place = function() {
      var _ref5, _ref6;
      return ((_ref5 = (_ref6 = this.raw.place) != null ? _ref6 : this.cfg().place) != null ? _ref5 : this.constructor.place).call(this);
    };

    Field.place = function() {
      this.$dom.css(this.timeline.config.ruler.position === 'top' ? {
        top: this.timeline.ruler.getOuterHeight(),
        bottom: 0
      } : {
        top: 0,
        bottom: this.timeline.ruler.getOuterHeight()
      });
      return this.$dom.css(this.timeline.config.sidebar.position === 'left' ? {
        left: this.timeline.sidebar.getOuterWidth(),
        right: 0
      } : {
        left: 0,
        right: this.timeline.sidebar.getOuterWidth()
      });
    };

    Field.prototype.buildGroups = function() {
      var group, _i, _len, _ref5, _results;
      _ref5 = this.timeline.groups;
      _results = [];
      for (_i = 0, _len = _ref5.length; _i < _len; _i++) {
        group = _ref5[_i];
        _results.push(group.build());
      }
      return _results;
    };

    return Field;

  })(TL.Element);

  TL.Element.Group = (function(_super) {
    __extends(Group, _super);

    function Group() {
      _ref5 = Group.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    Group.prototype.getClassName = function() {
      return 'group';
    };

    Group.prototype.getLines = function() {
      var line, _i, _len, _ref6, _results;
      _ref6 = this.timeline.lines;
      _results = [];
      for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
        line = _ref6[_i];
        if (line.raw.groupId === this.raw.id) {
          _results.push(line);
        }
      }
      return _results;
    };

    Group.prototype.getVerticalOffset = function() {
      var elseGroup, x;
      return x = TL.Misc.sum((function() {
        var _i, _len, _ref6, _results;
        _ref6 = this.timeline.groups;
        _results = [];
        for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
          elseGroup = _ref6[_i];
          if (elseGroup.raw.id === this.raw.id) {
            break;
          }
          _results.push(elseGroup.getOuterHeight());
        }
        return _results;
      }).call(this));
    };

    Group.prototype.getParentElement = function() {
      return this.timeline.root;
    };

    Group.prototype.getChildrenElements = function() {
      return this.getLines();
    };

    Group.prototype.build = function() {
      var _this = this;
      this.$dom = TL.Misc.addDom('group', this.timeline.field.$dom);
      this.$dom.data('timeline-host-object', this);
      TL.Misc.scrollize(this.$dom, 'xy', [
        {
          axis: 'x',
          getTarget: function() {
            var elseGroup, targets;
            targets = (function() {
              var _i, _len, _ref6, _results;
              _ref6 = this.timeline.groups;
              _results = [];
              for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
                elseGroup = _ref6[_i];
                if (elseGroup !== this) {
                  _results.push(elseGroup.$dom);
                }
              }
              return _results;
            }).call(_this);
            if (_this.timeline.ruler.$dom != null) {
              targets.push(_this.timeline.ruler.$dom);
            }
            return targets;
          }
        }, {
          axis: 'y',
          getTarget: function() {
            var _ref6;
            return (_ref6 = _this.$sidebarDom) != null ? _ref6 : null;
          }
        }
      ]);
      this.render();
      this.place();
      this.buildLines();
      this.buildRanges();
      this.buildDashes();
      return this.buildItems();
    };

    Group.prototype.render = function() {
      var _ref6, _ref7;
      return ((_ref6 = (_ref7 = this.raw.render) != null ? _ref7 : this.cfg().render) != null ? _ref6 : this.constructor.render).call(this);
    };

    Group.render = function() {};

    Group.prototype.place = function() {
      var _ref6, _ref7;
      return ((_ref6 = (_ref7 = this.raw.place) != null ? _ref7 : this.cfg().place) != null ? _ref6 : this.constructor.place).call(this);
    };

    Group.place = function() {
      var line, range;
      this.$dom.css({
        top: this.getVerticalOffset(),
        height: this.getInnerHeight()
      });
      return TL.Misc.setInnerSize(this.$dom, {
        x: TL.Misc.sum((function() {
          var _i, _len, _ref6, _results;
          _ref6 = this.timeline.ranges;
          _results = [];
          for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
            range = _ref6[_i];
            _results.push(range.getOuterWidth());
          }
          return _results;
        }).call(this)),
        y: TL.Misc.sum((function() {
          var _i, _len, _ref6, _results;
          _ref6 = this.getLines();
          _results = [];
          for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
            line = _ref6[_i];
            _results.push(line.getOuterHeight());
          }
          return _results;
        }).call(this))
      });
    };

    Group.prototype.buildLines = function() {
      var line, _i, _len, _ref6, _results;
      _ref6 = this.getLines();
      _results = [];
      for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
        line = _ref6[_i];
        _results.push(line.build());
      }
      return _results;
    };

    Group.prototype.buildRanges = function() {
      var range, _i, _len, _ref6, _results;
      _ref6 = this.timeline.ranges;
      _results = [];
      for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
        range = _ref6[_i];
        _results.push(range.build(this));
      }
      return _results;
    };

    Group.prototype.buildDashes = function() {
      var dash, _i, _len, _ref6, _results;
      _ref6 = this.timeline.calcDashes();
      _results = [];
      for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
        dash = _ref6[_i];
        _results.push(dash.build(this));
      }
      return _results;
    };

    Group.prototype.buildItems = function() {
      var item, _i, _len, _ref6, _results;
      _ref6 = this.timeline.items;
      _results = [];
      for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
        item = _ref6[_i];
        if (item.getLine().raw.groupId === this.raw.id) {
          _results.push(item.build());
        }
      }
      return _results;
    };

    Group.prototype.buildAtSidebar = function() {
      var _this = this;
      this.$sidebarDom = TL.Misc.addDom('group', this.timeline.sidebar.$dom);
      TL.Misc.scrollize(this.$sidebarDom, 'y', [
        {
          axis: 'y',
          getTarget: function() {
            return _this.$dom;
          }
        }
      ]);
      this.renderAtSidebar();
      this.placeAtSidebar();
      return this.buildLinesAtSidebar();
    };

    Group.prototype.renderAtSidebar = function() {
      var _ref6, _ref7;
      return ((_ref6 = (_ref7 = this.raw.renderAtSidebar) != null ? _ref7 : this.cfg().renderAtSidebar) != null ? _ref6 : this.constructor.renderAtSidebar).call(this);
    };

    Group.renderAtSidebar = function() {};

    Group.prototype.placeAtSidebar = function() {
      var _ref6, _ref7;
      return ((_ref6 = (_ref7 = this.raw.placeAtSidebar) != null ? _ref7 : this.cfg().placeAtSidebar) != null ? _ref6 : this.constructor.placeAtSidebar).call(this);
    };

    Group.placeAtSidebar = function() {
      var line;
      this.$sidebarDom.css({
        top: this.getVerticalOffset(),
        height: this.getInnerHeight()
      });
      return TL.Misc.setInnerSize(this.$sidebarDom, {
        x: this.timeline.sidebar.getInnerWidth(),
        y: TL.Misc.sum((function() {
          var _i, _len, _ref6, _results;
          _ref6 = this.getLines();
          _results = [];
          for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
            line = _ref6[_i];
            _results.push(line.getOuterHeight());
          }
          return _results;
        }).call(this))
      });
    };

    Group.prototype.buildLinesAtSidebar = function() {
      var line, _i, _len, _ref6, _results;
      _ref6 = this.getLines();
      _results = [];
      for (_i = 0, _len = _ref6.length; _i < _len; _i++) {
        line = _ref6[_i];
        _results.push(line.buildAtSidebar());
      }
      return _results;
    };

    return Group;

  })(TL.Element);

  TL.Element.Range = (function(_super) {
    __extends(Range, _super);

    function Range() {
      _ref6 = Range.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    Range.prototype.getClassName = function() {
      return 'range';
    };

    Range.prototype.init = function() {
      return this.$doms = [];
    };

    Range.prototype.getOffset = function() {
      var elseRange;
      return TL.Misc.sum((function() {
        var _i, _len, _ref7, _results;
        _ref7 = this.timeline.ranges;
        _results = [];
        for (_i = 0, _len = _ref7.length; _i < _len; _i++) {
          elseRange = _ref7[_i];
          if (elseRange.raw.from < this.raw.from) {
            _results.push(elseRange.getOuterWidth());
          }
        }
        return _results;
      }).call(this));
    };

    Range.prototype.getInternalOffset = function(time) {
      return this.getExtraOffsetBefore() + Math.ceil(time / this.timeline.config.scale) - Math.ceil(this.raw.from / this.timeline.config.scale);
    };

    Range.prototype.getInnerWidth = function() {
      return Math.ceil(this.raw.to / this.timeline.config.scale) - Math.ceil(this.raw.from / this.timeline.config.scale);
    };

    Range.prototype.getOuterWidth = function() {
      return this.getInnerWidth() + this.getExtraOffsetBefore() + this.getExtraOffsetAfter();
    };

    Range.prototype.getExtraOffsetBefore = function() {
      var _ref7;
      return (_ref7 = this.raw.extraOffsetBefore) != null ? _ref7 : this.cfg().extraOffset.before;
    };

    Range.prototype.getExtraOffsetAfter = function() {
      var _ref7;
      return (_ref7 = this.raw.extraOffsetAfter) != null ? _ref7 : this.cfg().extraOffset.after;
    };

    Range.prototype.getTimeByOffset = function(offset) {
      return this.getTimeByInternalOffset(offset - this.getOffset() - this.getExtraOffsetBefore());
    };

    Range.prototype.getTimeByInternalOffset = function(internalOffset) {
      return this.raw.from + internalOffset * this.timeline.config.scale;
    };

    Range.prototype.build = function(group) {
      var $dom;
      $dom = TL.Misc.addDom('range', group.$dom);
      this.$doms.push($dom);
      this.render($dom);
      return this.place($dom);
    };

    Range.prototype.render = function($dom) {
      var _ref7, _ref8;
      return ((_ref7 = (_ref8 = this.raw.render) != null ? _ref8 : this.cfg().render) != null ? _ref7 : this.constructor.render).call(this, $dom);
    };

    Range.render = function($dom) {};

    Range.prototype.place = function($dom) {
      var _ref7, _ref8;
      return ((_ref7 = (_ref8 = this.raw.place) != null ? _ref8 : this.cfg().place) != null ? _ref7 : this.constructor.place).call(this, $dom);
    };

    Range.place = function($dom) {
      return $dom.css({
        left: this.getOffset(),
        width: this.getInnerWidth()
      });
    };

    Range.prototype.buildAtRuler = function() {
      this.$rulerDom = TL.Misc.addDom('range', this.timeline.ruler.$dom);
      this.renderAtRuler();
      return this.placeAtRuler();
    };

    Range.prototype.renderAtRuler = function() {
      var _ref7, _ref8;
      return ((_ref7 = (_ref8 = this.raw.renderAtRuler) != null ? _ref8 : this.cfg().renderAtRuler) != null ? _ref7 : this.constructor.renderAtRuler).call(this);
    };

    Range.renderAtRuler = function() {
      var from, to;
      from = moment.unix(this.raw.from).tz(this.timeline.config.timezone).format('DD.MM.YYYY HH:mm:ss');
      to = moment.unix(this.raw.to).tz(this.timeline.config.timezone).format('DD.MM.YYYY HH:mm:ss');
      return this.$rulerDom.empty().append(TL.Misc.addDom('heading').text("" + from + " — " + to));
    };

    Range.prototype.placeAtRuler = function() {
      var _ref7, _ref8;
      return ((_ref7 = (_ref8 = this.raw.placeAtRuler) != null ? _ref8 : this.cfg().placeAtRuler) != null ? _ref7 : this.constructor.placeAtRuler).call(this);
    };

    Range.placeAtRuler = function() {
      return this.$rulerDom.css({
        left: this.getOffset(),
        width: this.getInnerWidth()
      });
    };

    return Range;

  })(TL.Element);

  TL.Element.Dash = (function(_super) {
    __extends(Dash, _super);

    function Dash() {
      _ref7 = Dash.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    Dash.prototype.getClassName = function() {
      return 'dash';
    };

    Dash.prototype.init = function() {
      return this.$doms = [];
    };

    Dash.prototype.build = function(group) {
      var $dom;
      $dom = TL.Misc.addDom('dash', group.$dom);
      $dom.addClass("id-" + this.raw.rule.id);
      this.$doms.push($dom);
      this.render($dom);
      return this.place($dom);
    };

    Dash.prototype.render = function($dom) {
      var _ref8, _ref9;
      return ((_ref8 = (_ref9 = this.raw.render) != null ? _ref9 : this.cfg().render) != null ? _ref8 : this.constructor.render).call(this, $dom);
    };

    Dash.render = function($dom) {
      return $dom.empty();
    };

    Dash.prototype.place = function($dom) {
      var _ref8, _ref9;
      return ((_ref8 = (_ref9 = this.raw.place) != null ? _ref9 : this.cfg().place) != null ? _ref8 : this.constructor.place).call(this, $dom);
    };

    Dash.place = function($dom) {
      var offset;
      offset = this.timeline.getOffset(this.raw.time);
      if (offset != null) {
        return $dom.css({
          left: offset
        });
      }
    };

    Dash.prototype.buildAtRuler = function(dash) {
      this.$rulerDom = TL.Misc.addDom('dash', this.timeline.ruler.$dom);
      this.$rulerDom.addClass("id-" + this.raw.rule.id);
      this.renderAtRuler();
      return this.placeAtRuler();
    };

    Dash.prototype.renderAtRuler = function() {
      var _ref8, _ref9;
      return ((_ref8 = (_ref9 = this.raw.renderAtRuler) != null ? _ref9 : this.cfg().renderAtRuler) != null ? _ref8 : this.constructor.renderAtRuler).call(this);
    };

    Dash.renderAtRuler = function() {
      return this.$rulerDom.empty().append(TL.Misc.addDom('text').text(moment.unix(this.raw.time).tz(this.timeline.config.timezone).format('HH:mm')));
    };

    Dash.prototype.placeAtRuler = function() {
      var _ref8, _ref9;
      return ((_ref8 = (_ref9 = this.raw.placeAtRuler) != null ? _ref9 : this.cfg().placeAtRuler) != null ? _ref8 : this.constructor.placeAtRuler).call(this);
    };

    Dash.placeAtRuler = function() {
      var offset;
      offset = this.timeline.getOffset(this.raw.time);
      if (offset != null) {
        return this.$rulerDom.css({
          left: offset
        });
      }
    };

    return Dash;

  })(TL.Element);

  TL.Element.Line = (function(_super) {
    __extends(Line, _super);

    function Line() {
      _ref8 = Line.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    Line.prototype.getClassName = function() {
      return 'line';
    };

    Line.prototype.getVerticalOffset = function() {
      var elseLine;
      return TL.Misc.sum((function() {
        var _i, _len, _ref9, _results;
        _ref9 = this.timeline.lines;
        _results = [];
        for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
          elseLine = _ref9[_i];
          if (!(elseLine.raw.groupId === this.raw.groupId)) {
            continue;
          }
          if (elseLine.raw.id === this.raw.id) {
            break;
          }
          _results.push(elseLine.getOuterHeight());
        }
        return _results;
      }).call(this));
    };

    Line.prototype.getInternalVerticalOffset = function() {
      return this.getExtraOffsetBefore();
    };

    Line.prototype.getParentElement = function() {
      return this.getGroup();
    };

    Line.prototype.getRawHeight = function() {
      var _ref10, _ref9;
      return (_ref9 = (_ref10 = this.raw.height) != null ? _ref10 : this.cfg().height) != null ? _ref9 : 0;
    };

    Line.prototype.getInnerHeight = function() {
      return this.calcSize('Height');
    };

    Line.prototype.getOuterHeight = function() {
      return this.getInnerHeight() + this.getExtraOffsetBefore() + this.getExtraOffsetAfter();
    };

    Line.prototype.getGroup = function() {
      return this.timeline.getGroupById(this.raw.groupId);
    };

    Line.prototype.getExtraOffsetBefore = function() {
      var _ref9;
      return (_ref9 = this.raw.extraOffsetBefore) != null ? _ref9 : this.cfg().extraOffset.before;
    };

    Line.prototype.getExtraOffsetAfter = function() {
      var _ref9;
      return (_ref9 = this.raw.extraOffsetAfter) != null ? _ref9 : this.cfg().extraOffset.after;
    };

    Line.prototype.build = function() {
      this.$dom = TL.Misc.addDom('line', this.getGroup().$dom);
      this.render();
      return this.place();
    };

    Line.prototype.render = function() {
      var _ref10, _ref9;
      return ((_ref9 = (_ref10 = this.raw.render) != null ? _ref10 : this.cfg().render) != null ? _ref9 : this.constructor.render).call(this);
    };

    Line.render = function() {
      return this.$dom.empty();
    };

    Line.prototype.place = function() {
      var _ref10, _ref9;
      return ((_ref9 = (_ref10 = this.raw.place) != null ? _ref10 : this.cfg().place) != null ? _ref9 : this.constructor.place).call(this);
    };

    Line.place = function() {
      return this.$dom.css({
        top: this.getVerticalOffset(),
        height: this.getInnerHeight()
      });
    };

    Line.prototype.buildAtSidebar = function() {
      this.$sidebarDom = TL.Misc.addDom('line', this.getGroup().$sidebarDom);
      this.renderAtSidebar();
      return this.placeAtSidebar();
    };

    Line.prototype.renderAtSidebar = function() {
      var _ref10, _ref9;
      return ((_ref9 = (_ref10 = this.raw.renderAtSidebar) != null ? _ref10 : this.cfg().renderAtSidebar) != null ? _ref9 : this.constructor.renderAtSidebar).call(this);
    };

    Line.renderAtSidebar = function() {
      return this.$sidebarDom.empty().append(TL.Misc.addDom('heading').text(this.raw.id));
    };

    Line.prototype.placeAtSidebar = function() {
      var _ref10, _ref9;
      return ((_ref9 = (_ref10 = this.raw.placeAtSidebar) != null ? _ref10 : this.cfg().placeAtSidebar) != null ? _ref9 : this.constructor.placeAtSidebar).call(this);
    };

    Line.placeAtSidebar = function() {
      return this.$sidebarDom.css({
        top: this.getVerticalOffset(),
        height: this.getInnerHeight()
      });
    };

    return Line;

  })(TL.Element);

  TL.Element.Item = (function(_super) {
    __extends(Item, _super);

    function Item() {
      _ref9 = Item.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    Item.prototype.getClassName = function() {
      return 'item';
    };

    Item.prototype.getLine = function() {
      return this.timeline.getLineById(this.raw.lineId);
    };

    Item.prototype.getDuration = function() {
      return this.raw.to - this.raw.from;
    };

    Item.prototype.isDraggable = function() {
      var _ref10, _ref11;
      return (_ref10 = (_ref11 = this.raw.isDraggable) != null ? _ref11 : this.cfg().isDraggable) != null ? _ref10 : true;
    };

    Item.prototype.canCrossRanges = function() {
      var _ref10, _ref11;
      return (_ref10 = (_ref11 = this.raw.canCrossRanges) != null ? _ref11 : this.cfg().canCrossRanges) != null ? _ref10 : true;
    };

    Item.prototype.build = function() {
      this.$dom = TL.Misc.addDom('item', this.getLine().getGroup().$dom);
      this.render();
      this.place();
      this.makeDraggable();
      this.makeResizeableLeft();
      return this.makeResizeableRight();
    };

    Item.prototype.render = function() {
      var _ref10, _ref11;
      return ((_ref10 = (_ref11 = this.raw.render) != null ? _ref11 : this.cfg().render) != null ? _ref10 : this.constructor.render).call(this);
    };

    Item.render = function() {
      return this.$dom.empty().append(TL.Misc.addDom('text').text(this.raw.text));
    };

    Item.prototype.place = function() {
      var _ref10, _ref11;
      return ((_ref10 = (_ref11 = this.raw.place) != null ? _ref11 : this.cfg().place) != null ? _ref10 : this.constructor.place).call(this);
    };

    Item.place = function() {
      var line, offset;
      line = this.getLine();
      offset = this.timeline.getOffset(this.raw.from);
      return this.$dom.css({
        top: line.getVerticalOffset() + line.getInternalVerticalOffset(),
        height: line.getInnerHeight(),
        left: offset,
        width: this.timeline.getOffset(this.raw.to - 1) - offset
      });
    };

    Item.prototype.makeDraggable = function() {
      var modified,
        _this = this;
      this.$dragHint = null;
      modified = null;
      return this.$dom.draggable({
        helper: function() {
          return TL.Misc.addDom('drag-helper').css({
            width: _this.$dom.css('width'),
            height: _this.$dom.css('height')
          });
        },
        start: function(e, ui) {
          _this.$dragHint = TL.Misc.addDom('drag-hint', _this.getLine().getGroup().$dom);
          modified = $.extend(true, {}, _this);
          return _this.timeline.fireEvent('item:drag:start', {
            item: _this
          });
        },
        stop: function(e, ui) {
          _this.$dragHint.remove();
          modified = null;
          return _this.timeline.fireEvent('item:drag:stop', {
            item: _this
          });
        },
        drag: function(e, ui) {
          var dragInfo, duration, group, newLine;
          group = _this.getLine().getGroup();
          dragInfo = {
            parentOffset: TL.Misc.getScrollContainer(group.$dom).offset(),
            event: e,
            ui: ui
          };
          _this.renderDragHint(dragInfo);
          _this.placeDragHint(dragInfo);
          duration = _this.getDuration();
          modified.raw.from = _this.timeline.approxTime(_this.timeline.getTime(dragInfo.ui.position.left));
          modified.raw.to = modified.raw.from + duration;
          newLine = _this.timeline.getLineByVerticalOffset(group, dragInfo.event.pageY - dragInfo.parentOffset.top);
          if (newLine) {
            modified.raw.lineId = newLine.raw.id;
          }
          if (modified.isValid()) {
            if (_this.timeline.fireEvent('item:drag', {
              item: modified,
              originalItem: _this
            }) && _this.timeline.fireEvent('item:modify', {
              item: modified,
              originalItem: _this
            })) {
              $.extend(_this.raw, modified.raw);
              return _this.place();
            }
          }
        }
      });
    };

    Item.prototype.renderDragHint = function(dragInfo) {
      var _ref10, _ref11;
      return ((_ref10 = (_ref11 = this.raw.renderDragHint) != null ? _ref11 : this.cfg().renderDragHint) != null ? _ref10 : this.constructor.renderDragHint).call(this, dragInfo);
    };

    Item.renderDragHint = function(dragInfo) {
      var time;
      time = this.timeline.approxTime(this.timeline.getTime(dragInfo.ui.position.left));
      if (time != null) {
        return this.$dragHint.text(moment.unix(time).tz(this.timeline.config.timezone).format('DD.MM.YYYY HH:mm:ss'));
      }
    };

    Item.prototype.placeDragHint = function(dragInfo) {
      var _ref10, _ref11;
      return ((_ref10 = (_ref11 = this.raw.placeDragHint) != null ? _ref11 : this.cfg().placeDragHint) != null ? _ref10 : this.constructor.placeDragHint).call(this, dragInfo);
    };

    Item.placeDragHint = function(dragInfo) {
      return this.$dragHint.css({
        left: dragInfo.event.pageX - dragInfo.parentOffset.left,
        top: dragInfo.event.pageY - dragInfo.parentOffset.top
      });
    };

    Item.prototype.makeResizeableLeft = function() {
      var $resizerLeft, modified, originalDomOffset, originalDomWidth,
        _this = this;
      $resizerLeft = TL.Misc.addDom('resizer-left', this.$dom);
      this.$resizeHint = null;
      modified = null;
      originalDomOffset = null;
      originalDomWidth = null;
      return $resizerLeft.draggable({
        axis: 'x',
        helper: function() {
          return TL.Misc.addDom('resize-helper-left').css({
            width: $resizerLeft.css('width'),
            height: $resizerLeft.css('height')
          });
        },
        start: function(e, ui) {
          _this.$resizeHint = TL.Misc.addDom('resize-hint', _this.getLine().getGroup().$dom);
          modified = $.extend(true, {}, _this);
          originalDomOffset = _this.timeline.getOffset(_this.raw.from);
          originalDomWidth = _this.timeline.getOffset(_this.raw.to - 1) - originalDomOffset;
          return _this.timeline.fireEvent('item:resize:start', {
            item: _this
          });
        },
        stop: function(e, ui) {
          _this.$resizeHint.remove();
          modified = null;
          originalDomOffset = null;
          originalDomWidth = null;
          return _this.timeline.fireEvent('item:resize:stop', {
            item: _this
          });
        },
        drag: function(e, ui) {
          var group, resizeInfo;
          group = _this.getLine().getGroup();
          resizeInfo = {
            parentOffset: TL.Misc.getScrollContainer(group.$dom).offset(),
            event: e,
            ui: ui,
            left: originalDomOffset + (ui.position.left - ui.originalPosition.left),
            width: originalDomWidth - (ui.position.left - ui.originalPosition.left),
            side: 'left'
          };
          $(ui.helper).css({
            marginLeft: -(ui.position.left - ui.originalPosition.left)
          });
          _this.renderResizeHint(resizeInfo);
          _this.placeResizeHint(resizeInfo);
          modified.raw.from = _this.timeline.approxTime(_this.timeline.getTime(resizeInfo.left));
          if (modified.isValid()) {
            if (_this.timeline.fireEvent('item:resize', {
              item: modified,
              originalItem: _this
            }) && _this.timeline.fireEvent('item:modify', {
              item: modified,
              originalItem: _this
            })) {
              $.extend(_this.raw, modified.raw);
              return _this.place();
            }
          }
        }
      });
    };

    Item.prototype.makeResizeableRight = function() {
      var $resizerRight, modified, originalDomOffset, originalDomWidth,
        _this = this;
      $resizerRight = TL.Misc.addDom('resizer-right', this.$dom);
      this.$resizeHint = null;
      modified = null;
      originalDomOffset = null;
      originalDomWidth = null;
      return $resizerRight.draggable({
        axis: 'x',
        helper: function() {
          return TL.Misc.addDom('resize-helper-right').css({
            width: $resizerRight.css('width'),
            height: $resizerRight.css('height')
          });
        },
        start: function(e, ui) {
          _this.$resizeHint = TL.Misc.addDom('resize-hint', _this.getLine().getGroup().$dom);
          modified = $.extend(true, {}, _this);
          originalDomOffset = _this.timeline.getOffset(_this.raw.from);
          originalDomWidth = _this.timeline.getOffset(_this.raw.to - 1) - originalDomOffset;
          return _this.timeline.fireEvent('item:resize:start', {
            item: _this
          });
        },
        stop: function(e, ui) {
          _this.$resizeHint.remove();
          modified = null;
          originalDomOffset = null;
          originalDomWidth = null;
          return _this.timeline.fireEvent('item:resize:stop', {
            item: _this
          });
        },
        drag: function(e, ui) {
          var group, resizeInfo;
          group = _this.getLine().getGroup();
          resizeInfo = {
            parentOffset: TL.Misc.getScrollContainer(group.$dom).offset(),
            event: e,
            ui: ui,
            left: originalDomOffset,
            width: originalDomWidth + (ui.position.left - ui.originalPosition.left),
            side: 'right'
          };
          _this.renderResizeHint(resizeInfo);
          _this.placeResizeHint(resizeInfo);
          modified.raw.to = _this.timeline.approxTime(_this.timeline.getTime(resizeInfo.left + resizeInfo.width), true);
          if (modified.isValid()) {
            if (_this.timeline.fireEvent('item:resize', {
              item: modified,
              originalItem: _this
            }) && _this.timeline.fireEvent('item:modify', {
              item: modified,
              originalItem: _this
            })) {
              $.extend(_this.raw, modified.raw);
              return _this.place();
            }
          }
        }
      });
    };

    Item.prototype.renderResizeHint = function(resizeInfo) {
      var _ref10, _ref11;
      return ((_ref10 = (_ref11 = this.raw.renderResizeHint) != null ? _ref11 : this.cfg().renderResizeHint) != null ? _ref10 : this.constructor.renderResizeHint).call(this, resizeInfo);
    };

    Item.renderResizeHint = function(resizeInfo) {
      var offset, time;
      offset = resizeInfo.side === 'left' ? resizeInfo.left : resizeInfo.left + resizeInfo.width;
      time = this.timeline.approxTime(this.timeline.getTime(offset), resizeInfo.side === 'right');
      if (time != null) {
        return this.$resizeHint.text(moment.unix(time).tz(this.timeline.config.timezone).format('DD.MM.YYYY HH:mm:ss'));
      }
    };

    Item.prototype.placeResizeHint = function(resizeInfo) {
      var _ref10, _ref11;
      return ((_ref10 = (_ref11 = this.raw.placeResizeHint) != null ? _ref11 : this.cfg().placeResizeHint) != null ? _ref10 : this.constructor.placeResizeHint).call(this, resizeInfo);
    };

    Item.placeResizeHint = function(resizeInfo) {
      return this.$resizeHint.css({
        left: resizeInfo.event.pageX - resizeInfo.parentOffset.left,
        top: resizeInfo.event.pageY - resizeInfo.parentOffset.top
      });
    };

    Item.prototype.isValid = function() {
      var _ref10, _ref11;
      return ((_ref10 = (_ref11 = this.raw.isValid) != null ? _ref11 : this.cfg().isValid) != null ? _ref10 : this.constructor.isValid).call(this);
    };

    Item.isValid = function() {
      var rangeFrom, rangeTo;
      if (!(this.raw.from < this.raw.to)) {
        return false;
      }
      if ((this.raw.minDuration != null) && this.raw.to - this.raw.from < this.raw.minDuration) {
        return false;
      }
      rangeFrom = this.timeline.getRangeByTime(this.raw.from);
      if (rangeFrom == null) {
        return false;
      }
      rangeTo = this.timeline.getRangeByTime(this.raw.to - 1);
      if (rangeTo == null) {
        return false;
      }
      if (!(this.canCrossRanges() || rangeFrom === rangeTo)) {
        return false;
      }
      return true;
    };

    Item.prototype.remove = function() {
      var _this = this;
      this.destroy();
      return this.timeline.items = this.timeline.items.filter(function(item) {
        return _this !== item;
      });
    };

    Item.prototype.destroy = function() {
      var _ref10, _ref11, _ref12;
      if (this.$dom != null) {
        if ((_ref10 = this.$dom) != null) {
          _ref10.remove();
        }
        this.$dom = null;
      }
      if (this.$dragHint != null) {
        if ((_ref11 = this.$dragHint) != null) {
          _ref11.remove();
        }
        this.$dragHint = null;
      }
      if (this.$resizeHint != null) {
        if ((_ref12 = this.$resizeHint) != null) {
          _ref12.remove();
        }
        return this.$resizeHint = null;
      }
    };

    return Item;

  })(TL.Element);

  window.TL = TL;

}).call(this);
